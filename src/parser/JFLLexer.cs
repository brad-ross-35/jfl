//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 ./src/Parser/Grammar/JFL.g 2014-01-19 15:24:27

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class JFLLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int BLOCK=4;
	public const int CHAIN_OPERATOR=5;
	public const int COMPARATOR=6;
	public const int DIGIT=7;
	public const int ESCAPE_SEQ=8;
	public const int ESC_ID=9;
	public const int ESC_STRING=10;
	public const int EXPONENT=11;
	public const int EXPR=12;
	public const int FALSE=13;
	public const int FILTER=14;
	public const int HEX_DIGIT=15;
	public const int ID=16;
	public const int NULL=17;
	public const int NUMBER=18;
	public const int REGEX=19;
	public const int STRING=20;
	public const int TRUE=21;
	public const int UNICODE_ESC=22;
	public const int WS=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;

	// delegates
	// delegators

	public JFLLexer()
	{
		OnCreated();
	}

	public JFLLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public JFLLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "./src/Parser/Grammar/JFL.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__24();
	partial void LeaveRule_T__24();

	// $ANTLR start "T__24"
	[GrammarRule("T__24")]
	private void mT__24()
	{
		EnterRule_T__24();
		EnterRule("T__24", 1);
		TraceIn("T__24", 1);
		try
		{
			int _type = T__24;
			int _channel = DefaultTokenChannel;
			// ./src/Parser/Grammar/JFL.g:7:7: ( '!' )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:7:9: '!'
			{
			DebugLocation(7, 9);
			Match('!'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__24", 1);
			LeaveRule("T__24", 1);
			LeaveRule_T__24();
		}
	}
	// $ANTLR end "T__24"

	partial void EnterRule_T__25();
	partial void LeaveRule_T__25();

	// $ANTLR start "T__25"
	[GrammarRule("T__25")]
	private void mT__25()
	{
		EnterRule_T__25();
		EnterRule("T__25", 2);
		TraceIn("T__25", 2);
		try
		{
			int _type = T__25;
			int _channel = DefaultTokenChannel;
			// ./src/Parser/Grammar/JFL.g:8:7: ( '(' )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:8:9: '('
			{
			DebugLocation(8, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__25", 2);
			LeaveRule("T__25", 2);
			LeaveRule_T__25();
		}
	}
	// $ANTLR end "T__25"

	partial void EnterRule_T__26();
	partial void LeaveRule_T__26();

	// $ANTLR start "T__26"
	[GrammarRule("T__26")]
	private void mT__26()
	{
		EnterRule_T__26();
		EnterRule("T__26", 3);
		TraceIn("T__26", 3);
		try
		{
			int _type = T__26;
			int _channel = DefaultTokenChannel;
			// ./src/Parser/Grammar/JFL.g:9:7: ( ')' )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:9:9: ')'
			{
			DebugLocation(9, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__26", 3);
			LeaveRule("T__26", 3);
			LeaveRule_T__26();
		}
	}
	// $ANTLR end "T__26"

	partial void EnterRule_T__27();
	partial void LeaveRule_T__27();

	// $ANTLR start "T__27"
	[GrammarRule("T__27")]
	private void mT__27()
	{
		EnterRule_T__27();
		EnterRule("T__27", 4);
		TraceIn("T__27", 4);
		try
		{
			int _type = T__27;
			int _channel = DefaultTokenChannel;
			// ./src/Parser/Grammar/JFL.g:10:7: ( '*' )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:10:9: '*'
			{
			DebugLocation(10, 9);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__27", 4);
			LeaveRule("T__27", 4);
			LeaveRule_T__27();
		}
	}
	// $ANTLR end "T__27"

	partial void EnterRule_T__28();
	partial void LeaveRule_T__28();

	// $ANTLR start "T__28"
	[GrammarRule("T__28")]
	private void mT__28()
	{
		EnterRule_T__28();
		EnterRule("T__28", 5);
		TraceIn("T__28", 5);
		try
		{
			int _type = T__28;
			int _channel = DefaultTokenChannel;
			// ./src/Parser/Grammar/JFL.g:11:7: ( ',' )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:11:9: ','
			{
			DebugLocation(11, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__28", 5);
			LeaveRule("T__28", 5);
			LeaveRule_T__28();
		}
	}
	// $ANTLR end "T__28"

	partial void EnterRule_T__29();
	partial void LeaveRule_T__29();

	// $ANTLR start "T__29"
	[GrammarRule("T__29")]
	private void mT__29()
	{
		EnterRule_T__29();
		EnterRule("T__29", 6);
		TraceIn("T__29", 6);
		try
		{
			int _type = T__29;
			int _channel = DefaultTokenChannel;
			// ./src/Parser/Grammar/JFL.g:12:7: ( '.' )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:12:9: '.'
			{
			DebugLocation(12, 9);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__29", 6);
			LeaveRule("T__29", 6);
			LeaveRule_T__29();
		}
	}
	// $ANTLR end "T__29"

	partial void EnterRule_T__30();
	partial void LeaveRule_T__30();

	// $ANTLR start "T__30"
	[GrammarRule("T__30")]
	private void mT__30()
	{
		EnterRule_T__30();
		EnterRule("T__30", 7);
		TraceIn("T__30", 7);
		try
		{
			int _type = T__30;
			int _channel = DefaultTokenChannel;
			// ./src/Parser/Grammar/JFL.g:13:7: ( ':' )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:13:9: ':'
			{
			DebugLocation(13, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__30", 7);
			LeaveRule("T__30", 7);
			LeaveRule_T__30();
		}
	}
	// $ANTLR end "T__30"

	partial void EnterRule_T__31();
	partial void LeaveRule_T__31();

	// $ANTLR start "T__31"
	[GrammarRule("T__31")]
	private void mT__31()
	{
		EnterRule_T__31();
		EnterRule("T__31", 8);
		TraceIn("T__31", 8);
		try
		{
			int _type = T__31;
			int _channel = DefaultTokenChannel;
			// ./src/Parser/Grammar/JFL.g:14:7: ( '?' )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:14:9: '?'
			{
			DebugLocation(14, 9);
			Match('?'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__31", 8);
			LeaveRule("T__31", 8);
			LeaveRule_T__31();
		}
	}
	// $ANTLR end "T__31"

	partial void EnterRule_T__32();
	partial void LeaveRule_T__32();

	// $ANTLR start "T__32"
	[GrammarRule("T__32")]
	private void mT__32()
	{
		EnterRule_T__32();
		EnterRule("T__32", 9);
		TraceIn("T__32", 9);
		try
		{
			int _type = T__32;
			int _channel = DefaultTokenChannel;
			// ./src/Parser/Grammar/JFL.g:15:7: ( '[' )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:15:9: '['
			{
			DebugLocation(15, 9);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__32", 9);
			LeaveRule("T__32", 9);
			LeaveRule_T__32();
		}
	}
	// $ANTLR end "T__32"

	partial void EnterRule_T__33();
	partial void LeaveRule_T__33();

	// $ANTLR start "T__33"
	[GrammarRule("T__33")]
	private void mT__33()
	{
		EnterRule_T__33();
		EnterRule("T__33", 10);
		TraceIn("T__33", 10);
		try
		{
			int _type = T__33;
			int _channel = DefaultTokenChannel;
			// ./src/Parser/Grammar/JFL.g:16:7: ( ']' )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:16:9: ']'
			{
			DebugLocation(16, 9);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__33", 10);
			LeaveRule("T__33", 10);
			LeaveRule_T__33();
		}
	}
	// $ANTLR end "T__33"

	partial void EnterRule_T__34();
	partial void LeaveRule_T__34();

	// $ANTLR start "T__34"
	[GrammarRule("T__34")]
	private void mT__34()
	{
		EnterRule_T__34();
		EnterRule("T__34", 11);
		TraceIn("T__34", 11);
		try
		{
			int _type = T__34;
			int _channel = DefaultTokenChannel;
			// ./src/Parser/Grammar/JFL.g:17:7: ( '{' )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:17:9: '{'
			{
			DebugLocation(17, 9);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__34", 11);
			LeaveRule("T__34", 11);
			LeaveRule_T__34();
		}
	}
	// $ANTLR end "T__34"

	partial void EnterRule_T__35();
	partial void LeaveRule_T__35();

	// $ANTLR start "T__35"
	[GrammarRule("T__35")]
	private void mT__35()
	{
		EnterRule_T__35();
		EnterRule("T__35", 12);
		TraceIn("T__35", 12);
		try
		{
			int _type = T__35;
			int _channel = DefaultTokenChannel;
			// ./src/Parser/Grammar/JFL.g:18:7: ( '}' )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:18:9: '}'
			{
			DebugLocation(18, 9);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__35", 12);
			LeaveRule("T__35", 12);
			LeaveRule_T__35();
		}
	}
	// $ANTLR end "T__35"

	partial void EnterRule_CHAIN_OPERATOR();
	partial void LeaveRule_CHAIN_OPERATOR();

	// $ANTLR start "CHAIN_OPERATOR"
	[GrammarRule("CHAIN_OPERATOR")]
	private void mCHAIN_OPERATOR()
	{
		EnterRule_CHAIN_OPERATOR();
		EnterRule("CHAIN_OPERATOR", 13);
		TraceIn("CHAIN_OPERATOR", 13);
		try
		{
			int _type = CHAIN_OPERATOR;
			int _channel = DefaultTokenChannel;
			// ./src/Parser/Grammar/JFL.g:69:2: ( '&' | '|' )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:
			{
			DebugLocation(69, 2);
			if (input.LA(1)=='&'||input.LA(1)=='|')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CHAIN_OPERATOR", 13);
			LeaveRule("CHAIN_OPERATOR", 13);
			LeaveRule_CHAIN_OPERATOR();
		}
	}
	// $ANTLR end "CHAIN_OPERATOR"

	partial void EnterRule_COMPARATOR();
	partial void LeaveRule_COMPARATOR();

	// $ANTLR start "COMPARATOR"
	[GrammarRule("COMPARATOR")]
	private void mCOMPARATOR()
	{
		EnterRule_COMPARATOR();
		EnterRule("COMPARATOR", 14);
		TraceIn("COMPARATOR", 14);
		try
		{
			int _type = COMPARATOR;
			int _channel = DefaultTokenChannel;
			// ./src/Parser/Grammar/JFL.g:74:2: ( '=' | '!=' | '>' | '<' | '>=' | '<=' )
			int alt1=6;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case '=':
				{
				alt1 = 1;
				}
				break;
			case '!':
				{
				alt1 = 2;
				}
				break;
			case '>':
				{
				int LA1_2 = input.LA(2);

				if ((LA1_2=='='))
				{
					alt1 = 5;
				}
				else
				{
					alt1 = 3;
				}
				}
				break;
			case '<':
				{
				int LA1_2 = input.LA(2);

				if ((LA1_2=='='))
				{
					alt1 = 6;
				}
				else
				{
					alt1 = 4;
				}
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// ./src/Parser/Grammar/JFL.g:74:4: '='
				{
				DebugLocation(74, 4);
				Match('='); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./src/Parser/Grammar/JFL.g:75:4: '!='
				{
				DebugLocation(75, 4);
				Match("!="); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ./src/Parser/Grammar/JFL.g:76:4: '>'
				{
				DebugLocation(76, 4);
				Match('>'); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ./src/Parser/Grammar/JFL.g:77:4: '<'
				{
				DebugLocation(77, 4);
				Match('<'); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ./src/Parser/Grammar/JFL.g:78:4: '>='
				{
				DebugLocation(78, 4);
				Match(">="); 


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ./src/Parser/Grammar/JFL.g:79:4: '<='
				{
				DebugLocation(79, 4);
				Match("<="); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMPARATOR", 14);
			LeaveRule("COMPARATOR", 14);
			LeaveRule_COMPARATOR();
		}
	}
	// $ANTLR end "COMPARATOR"

	partial void EnterRule_TRUE();
	partial void LeaveRule_TRUE();

	// $ANTLR start "TRUE"
	[GrammarRule("TRUE")]
	private void mTRUE()
	{
		EnterRule_TRUE();
		EnterRule("TRUE", 15);
		TraceIn("TRUE", 15);
		try
		{
			int _type = TRUE;
			int _channel = DefaultTokenChannel;
			// ./src/Parser/Grammar/JFL.g:83:2: ( 'true' )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:83:4: 'true'
			{
			DebugLocation(83, 4);
			Match("true"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TRUE", 15);
			LeaveRule("TRUE", 15);
			LeaveRule_TRUE();
		}
	}
	// $ANTLR end "TRUE"

	partial void EnterRule_FALSE();
	partial void LeaveRule_FALSE();

	// $ANTLR start "FALSE"
	[GrammarRule("FALSE")]
	private void mFALSE()
	{
		EnterRule_FALSE();
		EnterRule("FALSE", 16);
		TraceIn("FALSE", 16);
		try
		{
			int _type = FALSE;
			int _channel = DefaultTokenChannel;
			// ./src/Parser/Grammar/JFL.g:87:2: ( 'false' )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:87:4: 'false'
			{
			DebugLocation(87, 4);
			Match("false"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FALSE", 16);
			LeaveRule("FALSE", 16);
			LeaveRule_FALSE();
		}
	}
	// $ANTLR end "FALSE"

	partial void EnterRule_NULL();
	partial void LeaveRule_NULL();

	// $ANTLR start "NULL"
	[GrammarRule("NULL")]
	private void mNULL()
	{
		EnterRule_NULL();
		EnterRule("NULL", 17);
		TraceIn("NULL", 17);
		try
		{
			int _type = NULL;
			int _channel = DefaultTokenChannel;
			// ./src/Parser/Grammar/JFL.g:91:2: ( 'null' )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:91:4: 'null'
			{
			DebugLocation(91, 4);
			Match("null"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NULL", 17);
			LeaveRule("NULL", 17);
			LeaveRule_NULL();
		}
	}
	// $ANTLR end "NULL"

	partial void EnterRule_REGEX();
	partial void LeaveRule_REGEX();

	// $ANTLR start "REGEX"
	[GrammarRule("REGEX")]
	private void mREGEX()
	{
		EnterRule_REGEX();
		EnterRule("REGEX", 18);
		TraceIn("REGEX", 18);
		try
		{
			int _type = REGEX;
			int _channel = DefaultTokenChannel;
			// ./src/Parser/Grammar/JFL.g:95:2: ( '/' ( . )* '/' )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:95:4: '/' ( . )* '/'
			{
			DebugLocation(95, 4);
			Match('/'); 
			DebugLocation(95, 8);
			// ./src/Parser/Grammar/JFL.g:95:8: ( . )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1=='/'))
				{
					alt2 = 2;
				}
				else if (((LA2_1>='\u0000' && LA2_1<='.')||(LA2_1>='0' && LA2_1<='\uFFFF')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// ./src/Parser/Grammar/JFL.g:95:8: .
					{
					DebugLocation(95, 8);
					MatchAny(); 

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(95, 11);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("REGEX", 18);
			LeaveRule("REGEX", 18);
			LeaveRule_REGEX();
		}
	}
	// $ANTLR end "REGEX"

	partial void EnterRule_NUMBER();
	partial void LeaveRule_NUMBER();

	// $ANTLR start "NUMBER"
	[GrammarRule("NUMBER")]
	private void mNUMBER()
	{
		EnterRule_NUMBER();
		EnterRule("NUMBER", 19);
		TraceIn("NUMBER", 19);
		try
		{
			int _type = NUMBER;
			int _channel = DefaultTokenChannel;
			// ./src/Parser/Grammar/JFL.g:99:2: ( ( '-' )? ( DIGIT )+ ( '.' ( DIGIT )+ )? ( EXPONENT )? )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:99:4: ( '-' )? ( DIGIT )+ ( '.' ( DIGIT )+ )? ( EXPONENT )?
			{
			DebugLocation(99, 4);
			// ./src/Parser/Grammar/JFL.g:99:4: ( '-' )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_1 = input.LA(1);

			if ((LA3_1=='-'))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// ./src/Parser/Grammar/JFL.g:99:4: '-'
				{
				DebugLocation(99, 4);
				Match('-'); 

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(99, 9);
			// ./src/Parser/Grammar/JFL.g:99:9: ( DIGIT )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if (((LA4_1>='0' && LA4_1<='9')))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// ./src/Parser/Grammar/JFL.g:
					{
					DebugLocation(99, 9);
					input.Consume();


					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(99, 16);
			// ./src/Parser/Grammar/JFL.g:99:16: ( '.' ( DIGIT )+ )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1=='.'))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// ./src/Parser/Grammar/JFL.g:99:18: '.' ( DIGIT )+
				{
				DebugLocation(99, 18);
				Match('.'); 
				DebugLocation(99, 22);
				// ./src/Parser/Grammar/JFL.g:99:22: ( DIGIT )+
				int cnt5=0;
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_1 = input.LA(1);

					if (((LA5_1>='0' && LA5_1<='9')))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// ./src/Parser/Grammar/JFL.g:
						{
						DebugLocation(99, 22);
						input.Consume();


						}
						break;

					default:
						if (cnt5 >= 1)
							goto loop5;

						EarlyExitException eee5 = new EarlyExitException( 5, input );
						DebugRecognitionException(eee5);
						throw eee5;
					}
					cnt5++;
				}
				loop5:
					;

				} finally { DebugExitSubRule(5); }


				}
				break;

			}
			} finally { DebugExitSubRule(6); }

			DebugLocation(99, 31);
			// ./src/Parser/Grammar/JFL.g:99:31: ( EXPONENT )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_1 = input.LA(1);

			if ((LA7_1=='E'||LA7_1=='e'))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// ./src/Parser/Grammar/JFL.g:99:31: EXPONENT
				{
				DebugLocation(99, 31);
				mEXPONENT(); 

				}
				break;

			}
			} finally { DebugExitSubRule(7); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NUMBER", 19);
			LeaveRule("NUMBER", 19);
			LeaveRule_NUMBER();
		}
	}
	// $ANTLR end "NUMBER"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 20);
		TraceIn("DIGIT", 20);
		try
		{
			// ./src/Parser/Grammar/JFL.g:105:3: ( '0' .. '9' )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:
			{
			DebugLocation(105, 3);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DIGIT", 20);
			LeaveRule("DIGIT", 20);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_EXPONENT();
	partial void LeaveRule_EXPONENT();

	// $ANTLR start "EXPONENT"
	[GrammarRule("EXPONENT")]
	private void mEXPONENT()
	{
		EnterRule_EXPONENT();
		EnterRule("EXPONENT", 21);
		TraceIn("EXPONENT", 21);
		try
		{
			// ./src/Parser/Grammar/JFL.g:109:9: ( ( 'e' | 'E' ) ( '-' )? ( DIGIT )+ )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:109:11: ( 'e' | 'E' ) ( '-' )? ( DIGIT )+
			{
			DebugLocation(109, 11);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(109, 21);
			// ./src/Parser/Grammar/JFL.g:109:21: ( '-' )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_1 = input.LA(1);

			if ((LA8_1=='-'))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// ./src/Parser/Grammar/JFL.g:109:21: '-'
				{
				DebugLocation(109, 21);
				Match('-'); 

				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(109, 26);
			// ./src/Parser/Grammar/JFL.g:109:26: ( DIGIT )+
			int cnt9=0;
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if (((LA9_1>='0' && LA9_1<='9')))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// ./src/Parser/Grammar/JFL.g:
					{
					DebugLocation(109, 26);
					input.Consume();


					}
					break;

				default:
					if (cnt9 >= 1)
						goto loop9;

					EarlyExitException eee9 = new EarlyExitException( 9, input );
					DebugRecognitionException(eee9);
					throw eee9;
				}
				cnt9++;
			}
			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

		}
		finally
		{
			TraceOut("EXPONENT", 21);
			LeaveRule("EXPONENT", 21);
			LeaveRule_EXPONENT();
		}
	}
	// $ANTLR end "EXPONENT"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 22);
		TraceIn("ID", 22);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// ./src/Parser/Grammar/JFL.g:110:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '-' )+ )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:110:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '-' )+
			{
			DebugLocation(110, 7);
			// ./src/Parser/Grammar/JFL.g:110:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '-' )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1=='-'||(LA10_1>='A' && LA10_1<='Z')||LA10_1=='_'||(LA10_1>='a' && LA10_1<='z')))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// ./src/Parser/Grammar/JFL.g:
					{
					DebugLocation(110, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 22);
			LeaveRule("ID", 22);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_ESC_ID();
	partial void LeaveRule_ESC_ID();

	// $ANTLR start "ESC_ID"
	[GrammarRule("ESC_ID")]
	private void mESC_ID()
	{
		EnterRule_ESC_ID();
		EnterRule("ESC_ID", 23);
		TraceIn("ESC_ID", 23);
		try
		{
			int _type = ESC_ID;
			int _channel = DefaultTokenChannel;
			// ./src/Parser/Grammar/JFL.g:113:8: ( '\\'' ESC_STRING '\\'' )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:114:2: '\\'' ESC_STRING '\\''
			{
			DebugLocation(114, 2);
			Match('\''); 
			DebugLocation(114, 7);
			mESC_STRING(); 
			DebugLocation(114, 18);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ESC_ID", 23);
			LeaveRule("ESC_ID", 23);
			LeaveRule_ESC_ID();
		}
	}
	// $ANTLR end "ESC_ID"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 24);
		TraceIn("STRING", 24);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// ./src/Parser/Grammar/JFL.g:117:9: ( '\"' ESC_STRING '\"' )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:118:5: '\"' ESC_STRING '\"'
			{
			DebugLocation(118, 5);
			Match('\"'); 
			DebugLocation(118, 9);
			mESC_STRING(); 
			DebugLocation(118, 20);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 24);
			LeaveRule("STRING", 24);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_ESC_STRING();
	partial void LeaveRule_ESC_STRING();

	// $ANTLR start "ESC_STRING"
	[GrammarRule("ESC_STRING")]
	private void mESC_STRING()
	{
		EnterRule_ESC_STRING();
		EnterRule("ESC_STRING", 25);
		TraceIn("ESC_STRING", 25);
		try
		{
			// ./src/Parser/Grammar/JFL.g:124:2: ( ( ESCAPE_SEQ |~ ( '\\u0000' .. '\\u001f' | '\\\\' | '\\\"' ) )* )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:124:4: ( ESCAPE_SEQ |~ ( '\\u0000' .. '\\u001f' | '\\\\' | '\\\"' ) )*
			{
			DebugLocation(124, 4);
			// ./src/Parser/Grammar/JFL.g:124:4: ( ESCAPE_SEQ |~ ( '\\u0000' .. '\\u001f' | '\\\\' | '\\\"' ) )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=3;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1=='\\'))
				{
					alt11 = 1;
				}
				else if (((LA11_1>=' ' && LA11_1<='!')||(LA11_1>='#' && LA11_1<='[')||(LA11_1>=']' && LA11_1<='\uFFFF')))
				{
					alt11 = 2;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// ./src/Parser/Grammar/JFL.g:124:6: ESCAPE_SEQ
					{
					DebugLocation(124, 6);
					mESCAPE_SEQ(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ./src/Parser/Grammar/JFL.g:124:19: ~ ( '\\u0000' .. '\\u001f' | '\\\\' | '\\\"' )
					{
					DebugLocation(124, 19);
					input.Consume();


					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

		}
		finally
		{
			TraceOut("ESC_STRING", 25);
			LeaveRule("ESC_STRING", 25);
			LeaveRule_ESC_STRING();
		}
	}
	// $ANTLR end "ESC_STRING"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 26);
		TraceIn("WS", 26);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// ./src/Parser/Grammar/JFL.g:126:3: ( ( ' ' | '\\n' | '\\r' | '\\t' )+ )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:126:5: ( ' ' | '\\n' | '\\r' | '\\t' )+
			{
			DebugLocation(126, 5);
			// ./src/Parser/Grammar/JFL.g:126:5: ( ' ' | '\\n' | '\\r' | '\\t' )+
			int cnt12=0;
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if (((LA12_1>='\t' && LA12_1<='\n')||LA12_1=='\r'||LA12_1==' '))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// ./src/Parser/Grammar/JFL.g:
					{
					DebugLocation(126, 5);
					input.Consume();


					}
					break;

				default:
					if (cnt12 >= 1)
						goto loop12;

					EarlyExitException eee12 = new EarlyExitException( 12, input );
					DebugRecognitionException(eee12);
					throw eee12;
				}
				cnt12++;
			}
			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(126, 27);
			 _channel=Hidden; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 26);
			LeaveRule("WS", 26);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_ESCAPE_SEQ();
	partial void LeaveRule_ESCAPE_SEQ();

	// $ANTLR start "ESCAPE_SEQ"
	[GrammarRule("ESCAPE_SEQ")]
	private void mESCAPE_SEQ()
	{
		EnterRule_ESCAPE_SEQ();
		EnterRule("ESCAPE_SEQ", 27);
		TraceIn("ESCAPE_SEQ", 27);
		try
		{
			// ./src/Parser/Grammar/JFL.g:131:9: ( '\\\\' ( UNICODE_ESC | 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:131:13: '\\\\' ( UNICODE_ESC | 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
			{
			DebugLocation(131, 13);
			Match('\\'); 
			DebugLocation(131, 18);
			// ./src/Parser/Grammar/JFL.g:131:18: ( UNICODE_ESC | 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
			int alt13=9;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			switch (input.LA(1))
			{
			case 'u':
				{
				alt13 = 1;
				}
				break;
			case 'b':
				{
				alt13 = 2;
				}
				break;
			case 't':
				{
				alt13 = 3;
				}
				break;
			case 'n':
				{
				alt13 = 4;
				}
				break;
			case 'f':
				{
				alt13 = 5;
				}
				break;
			case 'r':
				{
				alt13 = 6;
				}
				break;
			case '\"':
				{
				alt13 = 7;
				}
				break;
			case '\'':
				{
				alt13 = 8;
				}
				break;
			case '\\':
				{
				alt13 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// ./src/Parser/Grammar/JFL.g:131:19: UNICODE_ESC
				{
				DebugLocation(131, 19);
				mUNICODE_ESC(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./src/Parser/Grammar/JFL.g:131:32: 'b'
				{
				DebugLocation(131, 32);
				Match('b'); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ./src/Parser/Grammar/JFL.g:131:36: 't'
				{
				DebugLocation(131, 36);
				Match('t'); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ./src/Parser/Grammar/JFL.g:131:40: 'n'
				{
				DebugLocation(131, 40);
				Match('n'); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ./src/Parser/Grammar/JFL.g:131:44: 'f'
				{
				DebugLocation(131, 44);
				Match('f'); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ./src/Parser/Grammar/JFL.g:131:48: 'r'
				{
				DebugLocation(131, 48);
				Match('r'); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ./src/Parser/Grammar/JFL.g:131:52: '\\\"'
				{
				DebugLocation(131, 52);
				Match('\"'); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ./src/Parser/Grammar/JFL.g:131:57: '\\''
				{
				DebugLocation(131, 57);
				Match('\''); 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// ./src/Parser/Grammar/JFL.g:131:62: '\\\\'
				{
				DebugLocation(131, 62);
				Match('\\'); 

				}
				break;

			}
			} finally { DebugExitSubRule(13); }


			}

		}
		finally
		{
			TraceOut("ESCAPE_SEQ", 27);
			LeaveRule("ESCAPE_SEQ", 27);
			LeaveRule_ESCAPE_SEQ();
		}
	}
	// $ANTLR end "ESCAPE_SEQ"

	partial void EnterRule_UNICODE_ESC();
	partial void LeaveRule_UNICODE_ESC();

	// $ANTLR start "UNICODE_ESC"
	[GrammarRule("UNICODE_ESC")]
	private void mUNICODE_ESC()
	{
		EnterRule_UNICODE_ESC();
		EnterRule("UNICODE_ESC", 28);
		TraceIn("UNICODE_ESC", 28);
		try
		{
			// ./src/Parser/Grammar/JFL.g:134:5: ( 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:134:7: 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
			{
			DebugLocation(134, 7);
			Match('u'); 
			DebugLocation(134, 11);
			mHEX_DIGIT(); 
			DebugLocation(134, 21);
			mHEX_DIGIT(); 
			DebugLocation(134, 31);
			mHEX_DIGIT(); 
			DebugLocation(134, 41);
			mHEX_DIGIT(); 

			}

		}
		finally
		{
			TraceOut("UNICODE_ESC", 28);
			LeaveRule("UNICODE_ESC", 28);
			LeaveRule_UNICODE_ESC();
		}
	}
	// $ANTLR end "UNICODE_ESC"

	partial void EnterRule_HEX_DIGIT();
	partial void LeaveRule_HEX_DIGIT();

	// $ANTLR start "HEX_DIGIT"
	[GrammarRule("HEX_DIGIT")]
	private void mHEX_DIGIT()
	{
		EnterRule_HEX_DIGIT();
		EnterRule("HEX_DIGIT", 29);
		TraceIn("HEX_DIGIT", 29);
		try
		{
			// ./src/Parser/Grammar/JFL.g:138:5: ( '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:
			{
			DebugLocation(138, 5);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("HEX_DIGIT", 29);
			LeaveRule("HEX_DIGIT", 29);
			LeaveRule_HEX_DIGIT();
		}
	}
	// $ANTLR end "HEX_DIGIT"

	public override void mTokens()
	{
		// ./src/Parser/Grammar/JFL.g:1:8: ( T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | CHAIN_OPERATOR | COMPARATOR | TRUE | FALSE | NULL | REGEX | NUMBER | ID | ESC_ID | STRING | WS )
		int alt14=23;
		try { DebugEnterDecision(14, false);
		switch (input.LA(1))
		{
		case '!':
			{
			int LA14_2 = input.LA(2);

			if ((LA14_2=='='))
			{
				alt14 = 14;
			}
			else
			{
				alt14 = 1;
			}
			}
			break;
		case '(':
			{
			alt14 = 2;
			}
			break;
		case ')':
			{
			alt14 = 3;
			}
			break;
		case '*':
			{
			alt14 = 4;
			}
			break;
		case ',':
			{
			alt14 = 5;
			}
			break;
		case '.':
			{
			alt14 = 6;
			}
			break;
		case ':':
			{
			alt14 = 7;
			}
			break;
		case '?':
			{
			alt14 = 8;
			}
			break;
		case '[':
			{
			alt14 = 9;
			}
			break;
		case ']':
			{
			alt14 = 10;
			}
			break;
		case '{':
			{
			alt14 = 11;
			}
			break;
		case '}':
			{
			alt14 = 12;
			}
			break;
		case '&':
		case '|':
			{
			alt14 = 13;
			}
			break;
		case '<':
		case '=':
		case '>':
			{
			alt14 = 14;
			}
			break;
		case 't':
			{
			int LA14_2 = input.LA(2);

			if ((LA14_2=='r'))
			{
				int LA14_3 = input.LA(3);

				if ((LA14_3=='u'))
				{
					int LA14_4 = input.LA(4);

					if ((LA14_4=='e'))
					{
						int LA14_5 = input.LA(5);

						if ((LA14_5=='-'||(LA14_5>='A' && LA14_5<='Z')||LA14_5=='_'||(LA14_5>='a' && LA14_5<='z')))
						{
							alt14 = 20;
						}
						else
						{
							alt14 = 15;
						}
					}
					else
					{
						alt14 = 20;
					}
				}
				else
				{
					alt14 = 20;
				}
			}
			else
			{
				alt14 = 20;
			}
			}
			break;
		case 'f':
			{
			int LA14_2 = input.LA(2);

			if ((LA14_2=='a'))
			{
				int LA14_3 = input.LA(3);

				if ((LA14_3=='l'))
				{
					int LA14_4 = input.LA(4);

					if ((LA14_4=='s'))
					{
						int LA14_5 = input.LA(5);

						if ((LA14_5=='e'))
						{
							int LA14_6 = input.LA(6);

							if ((LA14_6=='-'||(LA14_6>='A' && LA14_6<='Z')||LA14_6=='_'||(LA14_6>='a' && LA14_6<='z')))
							{
								alt14 = 20;
							}
							else
							{
								alt14 = 16;
							}
						}
						else
						{
							alt14 = 20;
						}
					}
					else
					{
						alt14 = 20;
					}
				}
				else
				{
					alt14 = 20;
				}
			}
			else
			{
				alt14 = 20;
			}
			}
			break;
		case 'n':
			{
			int LA14_2 = input.LA(2);

			if ((LA14_2=='u'))
			{
				int LA14_3 = input.LA(3);

				if ((LA14_3=='l'))
				{
					int LA14_4 = input.LA(4);

					if ((LA14_4=='l'))
					{
						int LA14_5 = input.LA(5);

						if ((LA14_5=='-'||(LA14_5>='A' && LA14_5<='Z')||LA14_5=='_'||(LA14_5>='a' && LA14_5<='z')))
						{
							alt14 = 20;
						}
						else
						{
							alt14 = 17;
						}
					}
					else
					{
						alt14 = 20;
					}
				}
				else
				{
					alt14 = 20;
				}
			}
			else
			{
				alt14 = 20;
			}
			}
			break;
		case '/':
			{
			alt14 = 18;
			}
			break;
		case '-':
			{
			int LA14_2 = input.LA(2);

			if (((LA14_2>='0' && LA14_2<='9')))
			{
				alt14 = 19;
			}
			else
			{
				alt14 = 20;
			}
			}
			break;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			{
			alt14 = 19;
			}
			break;
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z':
			{
			alt14 = 20;
			}
			break;
		case '\'':
			{
			alt14 = 21;
			}
			break;
		case '\"':
			{
			alt14 = 22;
			}
			break;
		case '\t':
		case '\n':
		case '\r':
		case ' ':
			{
			alt14 = 23;
			}
			break;
		default:
			{
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
		}

		} finally { DebugExitDecision(14); }
		switch (alt14)
		{
		case 1:
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:1:10: T__24
			{
			DebugLocation(1, 10);
			mT__24(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// ./src/Parser/Grammar/JFL.g:1:16: T__25
			{
			DebugLocation(1, 16);
			mT__25(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// ./src/Parser/Grammar/JFL.g:1:22: T__26
			{
			DebugLocation(1, 22);
			mT__26(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// ./src/Parser/Grammar/JFL.g:1:28: T__27
			{
			DebugLocation(1, 28);
			mT__27(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// ./src/Parser/Grammar/JFL.g:1:34: T__28
			{
			DebugLocation(1, 34);
			mT__28(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// ./src/Parser/Grammar/JFL.g:1:40: T__29
			{
			DebugLocation(1, 40);
			mT__29(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// ./src/Parser/Grammar/JFL.g:1:46: T__30
			{
			DebugLocation(1, 46);
			mT__30(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// ./src/Parser/Grammar/JFL.g:1:52: T__31
			{
			DebugLocation(1, 52);
			mT__31(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// ./src/Parser/Grammar/JFL.g:1:58: T__32
			{
			DebugLocation(1, 58);
			mT__32(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// ./src/Parser/Grammar/JFL.g:1:64: T__33
			{
			DebugLocation(1, 64);
			mT__33(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// ./src/Parser/Grammar/JFL.g:1:70: T__34
			{
			DebugLocation(1, 70);
			mT__34(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// ./src/Parser/Grammar/JFL.g:1:76: T__35
			{
			DebugLocation(1, 76);
			mT__35(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// ./src/Parser/Grammar/JFL.g:1:82: CHAIN_OPERATOR
			{
			DebugLocation(1, 82);
			mCHAIN_OPERATOR(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// ./src/Parser/Grammar/JFL.g:1:97: COMPARATOR
			{
			DebugLocation(1, 97);
			mCOMPARATOR(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// ./src/Parser/Grammar/JFL.g:1:108: TRUE
			{
			DebugLocation(1, 108);
			mTRUE(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// ./src/Parser/Grammar/JFL.g:1:113: FALSE
			{
			DebugLocation(1, 113);
			mFALSE(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// ./src/Parser/Grammar/JFL.g:1:119: NULL
			{
			DebugLocation(1, 119);
			mNULL(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// ./src/Parser/Grammar/JFL.g:1:124: REGEX
			{
			DebugLocation(1, 124);
			mREGEX(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// ./src/Parser/Grammar/JFL.g:1:130: NUMBER
			{
			DebugLocation(1, 130);
			mNUMBER(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// ./src/Parser/Grammar/JFL.g:1:137: ID
			{
			DebugLocation(1, 137);
			mID(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// ./src/Parser/Grammar/JFL.g:1:140: ESC_ID
			{
			DebugLocation(1, 140);
			mESC_ID(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// ./src/Parser/Grammar/JFL.g:1:147: STRING
			{
			DebugLocation(1, 147);
			mSTRING(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// ./src/Parser/Grammar/JFL.g:1:154: WS
			{
			DebugLocation(1, 154);
			mWS(); 

			}
			break;

		}

	}


	#region DFA

	protected override void InitDFAs()
	{
		base.InitDFAs();
	}

	#endregion

}
