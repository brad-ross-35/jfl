//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 ./src/Parser/Grammar/JFL.g 2013-08-10 15:42:50

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class JFLParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "BLOCK", "CHAIN_OPERATOR", "COMPARATOR", "DIGIT", "ESCAPE_SEQ", "ESC_ID", "ESC_STRING", "EXPONENT", "EXPR", "FALSE", "FILTER", "HEX_DIGIT", "ID", "NULL", "NUMBER", "REGEX", "STRING", "TRUE", "UNICODE_ESC", "WS", "'!'", "'('", "')'", "'*'", "','", "'.'", "':'", "'?'", "'['", "']'", "'{'", "'}'"
	};
	public const int EOF=-1;
	public const int BLOCK=4;
	public const int CHAIN_OPERATOR=5;
	public const int COMPARATOR=6;
	public const int DIGIT=7;
	public const int ESCAPE_SEQ=8;
	public const int ESC_ID=9;
	public const int ESC_STRING=10;
	public const int EXPONENT=11;
	public const int EXPR=12;
	public const int FALSE=13;
	public const int FILTER=14;
	public const int HEX_DIGIT=15;
	public const int ID=16;
	public const int NULL=17;
	public const int NUMBER=18;
	public const int REGEX=19;
	public const int STRING=20;
	public const int TRUE=21;
	public const int UNICODE_ESC=22;
	public const int WS=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;

	public JFLParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public JFLParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return JFLParser.tokenNames; } }
	public override string GrammarFileName { get { return "./src/Parser/Grammar/JFL.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_jfl();
	partial void LeaveRule_jfl();
	// $ANTLR start "jfl"
	// ./src/Parser/Grammar/JFL.g:20:8: public jfl : block ;
	[GrammarRule("jfl")]
	public AstParserRuleReturnScope<object, IToken> jfl()
	{
		EnterRule_jfl();
		EnterRule("jfl", 1);
		TraceIn("jfl", 1);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> block1 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "jfl");
		DebugLocation(20, 1);
		try
		{
			// ./src/Parser/Grammar/JFL.g:20:12: ( block )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:20:14: block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(20, 14);
			PushFollow(Follow._block_in_jfl47);
			block1=block();
			PopFollow();

			adaptor.AddChild(root_0, block1.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

			catch (RecognitionException e) {
				throw e;
			}

		finally
		{
			TraceOut("jfl", 1);
			LeaveRule("jfl", 1);
			LeaveRule_jfl();
		}
		DebugLocation(21, 1);
		} finally { DebugExitRule(GrammarFileName, "jfl"); }
		return retval;

	}
	// $ANTLR end "jfl"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// ./src/Parser/Grammar/JFL.g:23:1: block : '{' ( properties )? '}' -> ^( BLOCK ( properties )? ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<object, IToken> block()
	{
		EnterRule_block();
		EnterRule("block", 2);
		TraceIn("block", 2);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal2 = default(IToken);
		IToken char_literal4 = default(IToken);
		AstParserRuleReturnScope<object, IToken> properties3 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal2_tree = default(object);
		object char_literal4_tree = default(object);
		RewriteRuleITokenStream stream_34=new RewriteRuleITokenStream(adaptor,"token 34");
		RewriteRuleITokenStream stream_35=new RewriteRuleITokenStream(adaptor,"token 35");
		RewriteRuleSubtreeStream stream_properties=new RewriteRuleSubtreeStream(adaptor,"rule properties");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(23, 1);
		try
		{
			// ./src/Parser/Grammar/JFL.g:23:7: ( '{' ( properties )? '}' -> ^( BLOCK ( properties )? ) )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:23:9: '{' ( properties )? '}'
			{
			DebugLocation(23, 9);
			char_literal2=(IToken)Match(input,34,Follow._34_in_block58);  
			stream_34.Add(char_literal2);

			DebugLocation(23, 13);
			// ./src/Parser/Grammar/JFL.g:23:13: ( properties )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if ((LA1_1==ESC_ID||LA1_1==ID||LA1_1==REGEX||LA1_1==24||LA1_1==27))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// ./src/Parser/Grammar/JFL.g:23:13: properties
				{
				DebugLocation(23, 13);
				PushFollow(Follow._properties_in_block60);
				properties3=properties();
				PopFollow();

				stream_properties.Add(properties3.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(23, 25);
			char_literal4=(IToken)Match(input,35,Follow._35_in_block63);  
			stream_35.Add(char_literal4);



			{
			// AST REWRITE
			// elements: properties
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 23:29: -> ^( BLOCK ( properties )? )
			{
				DebugLocation(23, 32);
				// ./src/Parser/Grammar/JFL.g:23:32: ^( BLOCK ( properties )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(23, 34);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(23, 40);
				// ./src/Parser/Grammar/JFL.g:23:40: ( properties )?
				if (stream_properties.HasNext)
				{
					DebugLocation(23, 40);
					adaptor.AddChild(root_1, stream_properties.NextTree());

				}
				stream_properties.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

			catch (RecognitionException e) {
				throw e;
			}

		finally
		{
			TraceOut("block", 2);
			LeaveRule("block", 2);
			LeaveRule_block();
		}
		DebugLocation(24, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_properties();
	partial void LeaveRule_properties();
	// $ANTLR start "properties"
	// ./src/Parser/Grammar/JFL.g:26:1: properties : property ( ',' ! property )* ;
	[GrammarRule("properties")]
	private AstParserRuleReturnScope<object, IToken> properties()
	{
		EnterRule_properties();
		EnterRule("properties", 3);
		TraceIn("properties", 3);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal6 = default(IToken);
		AstParserRuleReturnScope<object, IToken> property5 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> property7 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal6_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "properties");
		DebugLocation(26, 1);
		try
		{
			// ./src/Parser/Grammar/JFL.g:27:2: ( property ( ',' ! property )* )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:27:4: property ( ',' ! property )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(27, 4);
			PushFollow(Follow._property_in_properties84);
			property5=property();
			PopFollow();

			adaptor.AddChild(root_0, property5.Tree);
			DebugLocation(27, 13);
			// ./src/Parser/Grammar/JFL.g:27:13: ( ',' ! property )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==28))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// ./src/Parser/Grammar/JFL.g:27:14: ',' ! property
					{
					DebugLocation(27, 17);
					char_literal6=(IToken)Match(input,28,Follow._28_in_properties87); 
					DebugLocation(27, 19);
					PushFollow(Follow._property_in_properties90);
					property7=property();
					PopFollow();

					adaptor.AddChild(root_0, property7.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

			catch (RecognitionException e) {
				throw e;
			}

		finally
		{
			TraceOut("properties", 3);
			LeaveRule("properties", 3);
			LeaveRule_properties();
		}
		DebugLocation(28, 1);
		} finally { DebugExitRule(GrammarFileName, "properties"); }
		return retval;

	}
	// $ANTLR end "properties"

	partial void EnterRule_property();
	partial void LeaveRule_property();
	// $ANTLR start "property"
	// ./src/Parser/Grammar/JFL.g:30:1: property : ( '!' )? propertyName ( filter )? ( ':' block )? -> ^( propertyName ( '!' )? ( filter )? ( block )? ) ;
	[GrammarRule("property")]
	private AstParserRuleReturnScope<object, IToken> property()
	{
		EnterRule_property();
		EnterRule("property", 4);
		TraceIn("property", 4);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal8 = default(IToken);
		IToken char_literal11 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyName9 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filter10 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> block12 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal8_tree = default(object);
		object char_literal11_tree = default(object);
		RewriteRuleITokenStream stream_24=new RewriteRuleITokenStream(adaptor,"token 24");
		RewriteRuleITokenStream stream_30=new RewriteRuleITokenStream(adaptor,"token 30");
		RewriteRuleSubtreeStream stream_propertyName=new RewriteRuleSubtreeStream(adaptor,"rule propertyName");
		RewriteRuleSubtreeStream stream_filter=new RewriteRuleSubtreeStream(adaptor,"rule filter");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "property");
		DebugLocation(30, 1);
		try
		{
			// ./src/Parser/Grammar/JFL.g:31:2: ( ( '!' )? propertyName ( filter )? ( ':' block )? -> ^( propertyName ( '!' )? ( filter )? ( block )? ) )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:31:4: ( '!' )? propertyName ( filter )? ( ':' block )?
			{
			DebugLocation(31, 4);
			// ./src/Parser/Grammar/JFL.g:31:4: ( '!' )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_1 = input.LA(1);

			if ((LA3_1==24))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// ./src/Parser/Grammar/JFL.g:31:4: '!'
				{
				DebugLocation(31, 4);
				char_literal8=(IToken)Match(input,24,Follow._24_in_property105);  
				stream_24.Add(char_literal8);


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(31, 9);
			PushFollow(Follow._propertyName_in_property108);
			propertyName9=propertyName();
			PopFollow();

			stream_propertyName.Add(propertyName9.Tree);
			DebugLocation(31, 22);
			// ./src/Parser/Grammar/JFL.g:31:22: ( filter )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==32))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// ./src/Parser/Grammar/JFL.g:31:22: filter
				{
				DebugLocation(31, 22);
				PushFollow(Follow._filter_in_property110);
				filter10=filter();
				PopFollow();

				stream_filter.Add(filter10.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(31, 30);
			// ./src/Parser/Grammar/JFL.g:31:30: ( ':' block )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_1 = input.LA(1);

			if ((LA5_1==30))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// ./src/Parser/Grammar/JFL.g:31:31: ':' block
				{
				DebugLocation(31, 31);
				char_literal11=(IToken)Match(input,30,Follow._30_in_property114);  
				stream_30.Add(char_literal11);

				DebugLocation(31, 35);
				PushFollow(Follow._block_in_property116);
				block12=block();
				PopFollow();

				stream_block.Add(block12.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(5); }



			{
			// AST REWRITE
			// elements: propertyName, 24, filter, block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 31:43: -> ^( propertyName ( '!' )? ( filter )? ( block )? )
			{
				DebugLocation(31, 46);
				// ./src/Parser/Grammar/JFL.g:31:46: ^( propertyName ( '!' )? ( filter )? ( block )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(31, 48);
				root_1 = (object)adaptor.BecomeRoot(stream_propertyName.NextNode(), root_1);

				DebugLocation(31, 61);
				// ./src/Parser/Grammar/JFL.g:31:61: ( '!' )?
				if (stream_24.HasNext)
				{
					DebugLocation(31, 61);
					adaptor.AddChild(root_1, stream_24.NextNode());

				}
				stream_24.Reset();
				DebugLocation(31, 66);
				// ./src/Parser/Grammar/JFL.g:31:66: ( filter )?
				if (stream_filter.HasNext)
				{
					DebugLocation(31, 66);
					adaptor.AddChild(root_1, stream_filter.NextTree());

				}
				stream_filter.Reset();
				DebugLocation(31, 74);
				// ./src/Parser/Grammar/JFL.g:31:74: ( block )?
				if (stream_block.HasNext)
				{
					DebugLocation(31, 74);
					adaptor.AddChild(root_1, stream_block.NextTree());

				}
				stream_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

			catch (RecognitionException e) {
				throw e;
			}

		finally
		{
			TraceOut("property", 4);
			LeaveRule("property", 4);
			LeaveRule_property();
		}
		DebugLocation(32, 1);
		} finally { DebugExitRule(GrammarFileName, "property"); }
		return retval;

	}
	// $ANTLR end "property"

	partial void EnterRule_propertyName();
	partial void LeaveRule_propertyName();
	// $ANTLR start "propertyName"
	// ./src/Parser/Grammar/JFL.g:34:1: propertyName : ( ID | ESC_ID | REGEX | '*' );
	[GrammarRule("propertyName")]
	private AstParserRuleReturnScope<object, IToken> propertyName()
	{
		EnterRule_propertyName();
		EnterRule("propertyName", 5);
		TraceIn("propertyName", 5);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set13 = default(IToken);

		object set13_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "propertyName");
		DebugLocation(34, 1);
		try
		{
			// ./src/Parser/Grammar/JFL.g:35:2: ( ID | ESC_ID | REGEX | '*' )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(35, 2);

			set13=(IToken)input.LT(1);
			if (input.LA(1)==ESC_ID||input.LA(1)==ID||input.LA(1)==REGEX||input.LA(1)==27)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set13));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

			catch (RecognitionException e) {
				throw e;
			}

		finally
		{
			TraceOut("propertyName", 5);
			LeaveRule("propertyName", 5);
			LeaveRule_propertyName();
		}
		DebugLocation(39, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyName"); }
		return retval;

	}
	// $ANTLR end "propertyName"

	partial void EnterRule_filter();
	partial void LeaveRule_filter();
	// $ANTLR start "filter"
	// ./src/Parser/Grammar/JFL.g:41:1: filter : '[' filterExpr ']' -> ^( FILTER filterExpr ) ;
	[GrammarRule("filter")]
	private AstParserRuleReturnScope<object, IToken> filter()
	{
		EnterRule_filter();
		EnterRule("filter", 6);
		TraceIn("filter", 6);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal14 = default(IToken);
		IToken char_literal16 = default(IToken);
		AstParserRuleReturnScope<object, IToken> filterExpr15 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal14_tree = default(object);
		object char_literal16_tree = default(object);
		RewriteRuleITokenStream stream_32=new RewriteRuleITokenStream(adaptor,"token 32");
		RewriteRuleITokenStream stream_33=new RewriteRuleITokenStream(adaptor,"token 33");
		RewriteRuleSubtreeStream stream_filterExpr=new RewriteRuleSubtreeStream(adaptor,"rule filterExpr");
		try { DebugEnterRule(GrammarFileName, "filter");
		DebugLocation(41, 1);
		try
		{
			// ./src/Parser/Grammar/JFL.g:41:8: ( '[' filterExpr ']' -> ^( FILTER filterExpr ) )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:41:10: '[' filterExpr ']'
			{
			DebugLocation(41, 10);
			char_literal14=(IToken)Match(input,32,Follow._32_in_filter171);  
			stream_32.Add(char_literal14);

			DebugLocation(41, 14);
			PushFollow(Follow._filterExpr_in_filter173);
			filterExpr15=filterExpr();
			PopFollow();

			stream_filterExpr.Add(filterExpr15.Tree);
			DebugLocation(41, 25);
			char_literal16=(IToken)Match(input,33,Follow._33_in_filter175);  
			stream_33.Add(char_literal16);



			{
			// AST REWRITE
			// elements: filterExpr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 41:29: -> ^( FILTER filterExpr )
			{
				DebugLocation(41, 32);
				// ./src/Parser/Grammar/JFL.g:41:32: ^( FILTER filterExpr )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(41, 34);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FILTER, "FILTER"), root_1);

				DebugLocation(41, 41);
				adaptor.AddChild(root_1, stream_filterExpr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

			catch (RecognitionException e) {
				throw e;
			}

		finally
		{
			TraceOut("filter", 6);
			LeaveRule("filter", 6);
			LeaveRule_filter();
		}
		DebugLocation(42, 1);
		} finally { DebugExitRule(GrammarFileName, "filter"); }
		return retval;

	}
	// $ANTLR end "filter"

	partial void EnterRule_filterExpr();
	partial void LeaveRule_filterExpr();
	// $ANTLR start "filterExpr"
	// ./src/Parser/Grammar/JFL.g:44:1: filterExpr : ( comparison -> comparison ) ( CHAIN_OPERATOR comp= comparison -> ^( CHAIN_OPERATOR $filterExpr $comp) )* ;
	[GrammarRule("filterExpr")]
	private AstParserRuleReturnScope<object, IToken> filterExpr()
	{
		EnterRule_filterExpr();
		EnterRule("filterExpr", 7);
		TraceIn("filterExpr", 7);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken CHAIN_OPERATOR18 = default(IToken);
		AstParserRuleReturnScope<object, IToken> comp = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> comparison17 = default(AstParserRuleReturnScope<object, IToken>);

		object CHAIN_OPERATOR18_tree = default(object);
		RewriteRuleITokenStream stream_CHAIN_OPERATOR=new RewriteRuleITokenStream(adaptor,"token CHAIN_OPERATOR");
		RewriteRuleSubtreeStream stream_comparison=new RewriteRuleSubtreeStream(adaptor,"rule comparison");
		try { DebugEnterRule(GrammarFileName, "filterExpr");
		DebugLocation(44, 1);
		try
		{
			// ./src/Parser/Grammar/JFL.g:45:2: ( ( comparison -> comparison ) ( CHAIN_OPERATOR comp= comparison -> ^( CHAIN_OPERATOR $filterExpr $comp) )* )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:45:4: ( comparison -> comparison ) ( CHAIN_OPERATOR comp= comparison -> ^( CHAIN_OPERATOR $filterExpr $comp) )*
			{
			DebugLocation(45, 4);
			// ./src/Parser/Grammar/JFL.g:45:4: ( comparison -> comparison )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:45:5: comparison
			{
			DebugLocation(45, 5);
			PushFollow(Follow._comparison_in_filterExpr195);
			comparison17=comparison();
			PopFollow();

			stream_comparison.Add(comparison17.Tree);


			{
			// AST REWRITE
			// elements: comparison
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 45:16: -> comparison
			{
				DebugLocation(45, 19);
				adaptor.AddChild(root_0, stream_comparison.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(45, 31);
			// ./src/Parser/Grammar/JFL.g:45:31: ( CHAIN_OPERATOR comp= comparison -> ^( CHAIN_OPERATOR $filterExpr $comp) )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==CHAIN_OPERATOR))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// ./src/Parser/Grammar/JFL.g:45:32: CHAIN_OPERATOR comp= comparison
					{
					DebugLocation(45, 32);
					CHAIN_OPERATOR18=(IToken)Match(input,CHAIN_OPERATOR,Follow._CHAIN_OPERATOR_in_filterExpr203);  
					stream_CHAIN_OPERATOR.Add(CHAIN_OPERATOR18);

					DebugLocation(45, 51);
					PushFollow(Follow._comparison_in_filterExpr207);
					comp=comparison();
					PopFollow();

					stream_comparison.Add(comp.Tree);


					{
					// AST REWRITE
					// elements: CHAIN_OPERATOR, filterExpr, comp
					// token labels: 
					// rule labels: comp, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_comp=new RewriteRuleSubtreeStream(adaptor,"rule comp",comp!=null?comp.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 45:63: -> ^( CHAIN_OPERATOR $filterExpr $comp)
					{
						DebugLocation(45, 66);
						// ./src/Parser/Grammar/JFL.g:45:66: ^( CHAIN_OPERATOR $filterExpr $comp)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(45, 68);
						root_1 = (object)adaptor.BecomeRoot(stream_CHAIN_OPERATOR.NextNode(), root_1);

						DebugLocation(45, 84);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(45, 96);
						adaptor.AddChild(root_1, stream_comp.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

			catch (RecognitionException e) {
				throw e;
			}

		finally
		{
			TraceOut("filterExpr", 7);
			LeaveRule("filterExpr", 7);
			LeaveRule_filterExpr();
		}
		DebugLocation(46, 1);
		} finally { DebugExitRule(GrammarFileName, "filterExpr"); }
		return retval;

	}
	// $ANTLR end "filterExpr"

	partial void EnterRule_comparison();
	partial void LeaveRule_comparison();
	// $ANTLR start "comparison"
	// ./src/Parser/Grammar/JFL.g:48:1: comparison : ( atom -> atom ) ( COMPARATOR a= atom -> ^( COMPARATOR $comparison $a) )* ;
	[GrammarRule("comparison")]
	private AstParserRuleReturnScope<object, IToken> comparison()
	{
		EnterRule_comparison();
		EnterRule("comparison", 8);
		TraceIn("comparison", 8);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken COMPARATOR20 = default(IToken);
		AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom19 = default(AstParserRuleReturnScope<object, IToken>);

		object COMPARATOR20_tree = default(object);
		RewriteRuleITokenStream stream_COMPARATOR=new RewriteRuleITokenStream(adaptor,"token COMPARATOR");
		RewriteRuleSubtreeStream stream_atom=new RewriteRuleSubtreeStream(adaptor,"rule atom");
		try { DebugEnterRule(GrammarFileName, "comparison");
		DebugLocation(48, 1);
		try
		{
			// ./src/Parser/Grammar/JFL.g:49:2: ( ( atom -> atom ) ( COMPARATOR a= atom -> ^( COMPARATOR $comparison $a) )* )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:49:4: ( atom -> atom ) ( COMPARATOR a= atom -> ^( COMPARATOR $comparison $a) )*
			{
			DebugLocation(49, 4);
			// ./src/Parser/Grammar/JFL.g:49:4: ( atom -> atom )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:49:5: atom
			{
			DebugLocation(49, 5);
			PushFollow(Follow._atom_in_comparison234);
			atom19=atom();
			PopFollow();

			stream_atom.Add(atom19.Tree);


			{
			// AST REWRITE
			// elements: atom
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 49:10: -> atom
			{
				DebugLocation(49, 13);
				adaptor.AddChild(root_0, stream_atom.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(49, 19);
			// ./src/Parser/Grammar/JFL.g:49:19: ( COMPARATOR a= atom -> ^( COMPARATOR $comparison $a) )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==COMPARATOR))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// ./src/Parser/Grammar/JFL.g:49:20: COMPARATOR a= atom
					{
					DebugLocation(49, 20);
					COMPARATOR20=(IToken)Match(input,COMPARATOR,Follow._COMPARATOR_in_comparison242);  
					stream_COMPARATOR.Add(COMPARATOR20);

					DebugLocation(49, 32);
					PushFollow(Follow._atom_in_comparison246);
					a=atom();
					PopFollow();

					stream_atom.Add(a.Tree);


					{
					// AST REWRITE
					// elements: COMPARATOR, comparison, a
					// token labels: 
					// rule labels: a, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 49:38: -> ^( COMPARATOR $comparison $a)
					{
						DebugLocation(49, 41);
						// ./src/Parser/Grammar/JFL.g:49:41: ^( COMPARATOR $comparison $a)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(49, 43);
						root_1 = (object)adaptor.BecomeRoot(stream_COMPARATOR.NextNode(), root_1);

						DebugLocation(49, 55);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(49, 67);
						adaptor.AddChild(root_1, stream_a.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

			catch (RecognitionException e) {
				throw e;
			}

		finally
		{
			TraceOut("comparison", 8);
			LeaveRule("comparison", 8);
			LeaveRule_comparison();
		}
		DebugLocation(50, 1);
		} finally { DebugExitRule(GrammarFileName, "comparison"); }
		return retval;

	}
	// $ANTLR end "comparison"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// ./src/Parser/Grammar/JFL.g:52:1: atom : ( propertyChain ( '?' )? -> ^( EXPR propertyChain ( '?' )? ) | '!' propertyChain -> ^( EXPR propertyChain '!' ) | STRING | REGEX | NUMBER | TRUE | FALSE | NULL | ( '!' )? '(' filterExpr ')' -> ^( EXPR filterExpr ( '!' )? ) );
	[GrammarRule("atom")]
	private AstParserRuleReturnScope<object, IToken> atom()
	{
		EnterRule_atom();
		EnterRule("atom", 9);
		TraceIn("atom", 9);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal22 = default(IToken);
		IToken char_literal23 = default(IToken);
		IToken STRING25 = default(IToken);
		IToken REGEX26 = default(IToken);
		IToken NUMBER27 = default(IToken);
		IToken TRUE28 = default(IToken);
		IToken FALSE29 = default(IToken);
		IToken NULL30 = default(IToken);
		IToken char_literal31 = default(IToken);
		IToken char_literal32 = default(IToken);
		IToken char_literal34 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyChain21 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> propertyChain24 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filterExpr33 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal22_tree = default(object);
		object char_literal23_tree = default(object);
		object STRING25_tree = default(object);
		object REGEX26_tree = default(object);
		object NUMBER27_tree = default(object);
		object TRUE28_tree = default(object);
		object FALSE29_tree = default(object);
		object NULL30_tree = default(object);
		object char_literal31_tree = default(object);
		object char_literal32_tree = default(object);
		object char_literal34_tree = default(object);
		RewriteRuleITokenStream stream_31=new RewriteRuleITokenStream(adaptor,"token 31");
		RewriteRuleITokenStream stream_24=new RewriteRuleITokenStream(adaptor,"token 24");
		RewriteRuleITokenStream stream_25=new RewriteRuleITokenStream(adaptor,"token 25");
		RewriteRuleITokenStream stream_26=new RewriteRuleITokenStream(adaptor,"token 26");
		RewriteRuleSubtreeStream stream_propertyChain=new RewriteRuleSubtreeStream(adaptor,"rule propertyChain");
		RewriteRuleSubtreeStream stream_filterExpr=new RewriteRuleSubtreeStream(adaptor,"rule filterExpr");
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(52, 1);
		try
		{
			// ./src/Parser/Grammar/JFL.g:53:2: ( propertyChain ( '?' )? -> ^( EXPR propertyChain ( '?' )? ) | '!' propertyChain -> ^( EXPR propertyChain '!' ) | STRING | REGEX | NUMBER | TRUE | FALSE | NULL | ( '!' )? '(' filterExpr ')' -> ^( EXPR filterExpr ( '!' )? ) )
			int alt10=9;
			try { DebugEnterDecision(10, false);
			switch (input.LA(1))
			{
			case ESC_ID:
			case ID:
				{
				alt10 = 1;
				}
				break;
			case 24:
				{
				int LA10_2 = input.LA(2);

				if ((LA10_2==ESC_ID||LA10_2==ID))
				{
					alt10 = 2;
				}
				else if ((LA10_2==25))
				{
					alt10 = 9;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRING:
				{
				alt10 = 3;
				}
				break;
			case REGEX:
				{
				alt10 = 4;
				}
				break;
			case NUMBER:
				{
				alt10 = 5;
				}
				break;
			case TRUE:
				{
				alt10 = 6;
				}
				break;
			case FALSE:
				{
				alt10 = 7;
				}
				break;
			case NULL:
				{
				alt10 = 8;
				}
				break;
			case 25:
				{
				alt10 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// ./src/Parser/Grammar/JFL.g:53:4: propertyChain ( '?' )?
				{
				DebugLocation(53, 4);
				PushFollow(Follow._propertyChain_in_atom271);
				propertyChain21=propertyChain();
				PopFollow();

				stream_propertyChain.Add(propertyChain21.Tree);
				DebugLocation(53, 17);
				// ./src/Parser/Grammar/JFL.g:53:17: ( '?' )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==31))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// ./src/Parser/Grammar/JFL.g:53:17: '?'
					{
					DebugLocation(53, 17);
					char_literal22=(IToken)Match(input,31,Follow._31_in_atom272);  
					stream_31.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(8); }



				{
				// AST REWRITE
				// elements: propertyChain, 31
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 53:23: -> ^( EXPR propertyChain ( '?' )? )
				{
					DebugLocation(53, 26);
					// ./src/Parser/Grammar/JFL.g:53:26: ^( EXPR propertyChain ( '?' )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(53, 28);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(EXPR, "EXPR"), root_1);

					DebugLocation(53, 34);
					adaptor.AddChild(root_1, stream_propertyChain.NextTree());
					DebugLocation(53, 48);
					// ./src/Parser/Grammar/JFL.g:53:48: ( '?' )?
					if (stream_31.HasNext)
					{
						DebugLocation(53, 48);
						adaptor.AddChild(root_1, stream_31.NextNode());

					}
					stream_31.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./src/Parser/Grammar/JFL.g:54:4: '!' propertyChain
				{
				DebugLocation(54, 4);
				char_literal23=(IToken)Match(input,24,Follow._24_in_atom291);  
				stream_24.Add(char_literal23);

				DebugLocation(54, 8);
				PushFollow(Follow._propertyChain_in_atom293);
				propertyChain24=propertyChain();
				PopFollow();

				stream_propertyChain.Add(propertyChain24.Tree);


				{
				// AST REWRITE
				// elements: propertyChain, 24
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 54:22: -> ^( EXPR propertyChain '!' )
				{
					DebugLocation(54, 25);
					// ./src/Parser/Grammar/JFL.g:54:25: ^( EXPR propertyChain '!' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(54, 27);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(EXPR, "EXPR"), root_1);

					DebugLocation(54, 32);
					adaptor.AddChild(root_1, stream_propertyChain.NextTree());
					DebugLocation(54, 46);
					adaptor.AddChild(root_1, stream_24.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ./src/Parser/Grammar/JFL.g:55:4: STRING
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(55, 4);
				STRING25=(IToken)Match(input,STRING,Follow._STRING_in_atom308); 
				STRING25_tree = (object)adaptor.Create(STRING25);
				adaptor.AddChild(root_0, STRING25_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ./src/Parser/Grammar/JFL.g:56:4: REGEX
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(56, 4);
				REGEX26=(IToken)Match(input,REGEX,Follow._REGEX_in_atom313); 
				REGEX26_tree = (object)adaptor.Create(REGEX26);
				adaptor.AddChild(root_0, REGEX26_tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ./src/Parser/Grammar/JFL.g:57:4: NUMBER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(57, 4);
				NUMBER27=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom318); 
				NUMBER27_tree = (object)adaptor.Create(NUMBER27);
				adaptor.AddChild(root_0, NUMBER27_tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ./src/Parser/Grammar/JFL.g:58:4: TRUE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(58, 4);
				TRUE28=(IToken)Match(input,TRUE,Follow._TRUE_in_atom323); 
				TRUE28_tree = (object)adaptor.Create(TRUE28);
				adaptor.AddChild(root_0, TRUE28_tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ./src/Parser/Grammar/JFL.g:59:4: FALSE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(59, 4);
				FALSE29=(IToken)Match(input,FALSE,Follow._FALSE_in_atom328); 
				FALSE29_tree = (object)adaptor.Create(FALSE29);
				adaptor.AddChild(root_0, FALSE29_tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ./src/Parser/Grammar/JFL.g:60:4: NULL
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(60, 4);
				NULL30=(IToken)Match(input,NULL,Follow._NULL_in_atom333); 
				NULL30_tree = (object)adaptor.Create(NULL30);
				adaptor.AddChild(root_0, NULL30_tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// ./src/Parser/Grammar/JFL.g:61:4: ( '!' )? '(' filterExpr ')'
				{
				DebugLocation(61, 4);
				// ./src/Parser/Grammar/JFL.g:61:4: ( '!' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==24))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// ./src/Parser/Grammar/JFL.g:61:4: '!'
					{
					DebugLocation(61, 4);
					char_literal31=(IToken)Match(input,24,Follow._24_in_atom338);  
					stream_24.Add(char_literal31);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }

				DebugLocation(61, 9);
				char_literal32=(IToken)Match(input,25,Follow._25_in_atom341);  
				stream_25.Add(char_literal32);

				DebugLocation(61, 13);
				PushFollow(Follow._filterExpr_in_atom343);
				filterExpr33=filterExpr();
				PopFollow();

				stream_filterExpr.Add(filterExpr33.Tree);
				DebugLocation(61, 24);
				char_literal34=(IToken)Match(input,26,Follow._26_in_atom345);  
				stream_26.Add(char_literal34);



				{
				// AST REWRITE
				// elements: filterExpr, 24
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 61:28: -> ^( EXPR filterExpr ( '!' )? )
				{
					DebugLocation(61, 31);
					// ./src/Parser/Grammar/JFL.g:61:31: ^( EXPR filterExpr ( '!' )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(61, 33);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(EXPR, "EXPR"), root_1);

					DebugLocation(61, 38);
					adaptor.AddChild(root_1, stream_filterExpr.NextTree());
					DebugLocation(61, 49);
					// ./src/Parser/Grammar/JFL.g:61:49: ( '!' )?
					if (stream_24.HasNext)
					{
						DebugLocation(61, 49);
						adaptor.AddChild(root_1, stream_24.NextNode());

					}
					stream_24.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

			catch (RecognitionException e) {
				throw e;
			}

		finally
		{
			TraceOut("atom", 9);
			LeaveRule("atom", 9);
			LeaveRule_atom();
		}
		DebugLocation(62, 1);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_propertyChain();
	partial void LeaveRule_propertyChain();
	// $ANTLR start "propertyChain"
	// ./src/Parser/Grammar/JFL.g:64:1: propertyChain : ( ID | ESC_ID ) ^ ( '.' ! ( ID | ESC_ID ) )* ;
	[GrammarRule("propertyChain")]
	private AstParserRuleReturnScope<object, IToken> propertyChain()
	{
		EnterRule_propertyChain();
		EnterRule("propertyChain", 10);
		TraceIn("propertyChain", 10);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set35 = default(IToken);
		IToken char_literal36 = default(IToken);
		IToken set37 = default(IToken);

		object set35_tree = default(object);
		object char_literal36_tree = default(object);
		object set37_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "propertyChain");
		DebugLocation(64, 1);
		try
		{
			// ./src/Parser/Grammar/JFL.g:65:2: ( ( ID | ESC_ID ) ^ ( '.' ! ( ID | ESC_ID ) )* )
			DebugEnterAlt(1);
			// ./src/Parser/Grammar/JFL.g:65:4: ( ID | ESC_ID ) ^ ( '.' ! ( ID | ESC_ID ) )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(65, 18);

			set35=(IToken)input.LT(1);
			set35=(IToken)input.LT(1);
			if (input.LA(1)==ESC_ID||input.LA(1)==ID)
			{
				input.Consume();
				root_0 = (object)adaptor.BecomeRoot((object)adaptor.Create(set35), root_0);
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(65, 20);
			// ./src/Parser/Grammar/JFL.g:65:20: ( '.' ! ( ID | ESC_ID ) )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==29))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// ./src/Parser/Grammar/JFL.g:65:21: '.' ! ( ID | ESC_ID )
					{
					DebugLocation(65, 24);
					char_literal36=(IToken)Match(input,29,Follow._29_in_propertyChain379); 
					DebugLocation(65, 26);

					set37=(IToken)input.LT(1);
					if (input.LA(1)==ESC_ID||input.LA(1)==ID)
					{
						input.Consume();
						adaptor.AddChild(root_0, (object)adaptor.Create(set37));
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

			catch (RecognitionException e) {
				throw e;
			}

		finally
		{
			TraceOut("propertyChain", 10);
			LeaveRule("propertyChain", 10);
			LeaveRule_propertyChain();
		}
		DebugLocation(66, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyChain"); }
		return retval;

	}
	// $ANTLR end "propertyChain"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _block_in_jfl47 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _34_in_block58 = new BitSet(new ulong[]{0x809090200UL});
		public static readonly BitSet _properties_in_block60 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _35_in_block63 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _property_in_properties84 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _28_in_properties87 = new BitSet(new ulong[]{0x9090200UL});
		public static readonly BitSet _property_in_properties90 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _24_in_property105 = new BitSet(new ulong[]{0x8090200UL});
		public static readonly BitSet _propertyName_in_property108 = new BitSet(new ulong[]{0x140000002UL});
		public static readonly BitSet _filter_in_property110 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _30_in_property114 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _block_in_property116 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_filter171 = new BitSet(new ulong[]{0x33F2200UL});
		public static readonly BitSet _filterExpr_in_filter173 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_filter175 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _comparison_in_filterExpr195 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _CHAIN_OPERATOR_in_filterExpr203 = new BitSet(new ulong[]{0x33F2200UL});
		public static readonly BitSet _comparison_in_filterExpr207 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _atom_in_comparison234 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _COMPARATOR_in_comparison242 = new BitSet(new ulong[]{0x33F2200UL});
		public static readonly BitSet _atom_in_comparison246 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _propertyChain_in_atom271 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _31_in_atom272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _24_in_atom291 = new BitSet(new ulong[]{0x10200UL});
		public static readonly BitSet _propertyChain_in_atom293 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom308 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REGEX_in_atom313 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_atom318 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_in_atom323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_in_atom328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_in_atom333 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _24_in_atom338 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_atom341 = new BitSet(new ulong[]{0x33F2200UL});
		public static readonly BitSet _filterExpr_in_atom343 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_atom345 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_propertyChain368 = new BitSet(new ulong[]{0x20000002UL});
		public static readonly BitSet _29_in_propertyChain379 = new BitSet(new ulong[]{0x10200UL});
		public static readonly BitSet _set_in_propertyChain382 = new BitSet(new ulong[]{0x20000002UL});
	}
	#endregion Follow sets
}
